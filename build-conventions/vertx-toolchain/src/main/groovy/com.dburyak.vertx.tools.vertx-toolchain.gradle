plugins {
    id 'java'
    id 'groovy'
    id 'com.dburyak.vertx.tools.dependency-management'
    id 'io.micronaut.minimal.library'
    id 'jacoco'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations {
    testAnnotationProcessor { extendsFrom annotationProcessor }
    integrationAnnotationProcessor { extendsFrom testAnnotationProcessor }
    compileOnly { extendsFrom annotationProcessor }
    testCompileOnly { extendsFrom compileOnly, testAnnotationProcessor }
    integrationCompileOnly { extendsFrom testCompileOnly, integrationAnnotationProcessor }
}

micronaut {
    importMicronautPlatform = false
}

dependencies {
    // lombok
    annotationProcessor 'org.projectlombok:lombok'

    // vertx
    implementation 'io.vertx:vertx-core'
    implementation 'io.vertx:vertx-rx-java3'

    // micronaut
    annotationProcessor 'io.micronaut:micronaut-inject-java'
    annotationProcessor 'io.micronaut.validation:micronaut-validation-processor'
    implementation 'io.micronaut.validation:micronaut-validation'
    implementation 'io.micronaut:micronaut-context' // required for immutable config properties
    implementation 'io.micronaut:micronaut-aop'
//    runtimeOnly 'io.micronaut:micronaut-core' // for bean introspection


    // logging
    implementation 'org.slf4j:slf4j-api'
    testImplementation 'org.apache.logging.log4j:log4j-core'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl'

    // testing
    testImplementation 'io.vertx:vertx-junit5'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.apache.groovy:groovy-all'
    testImplementation 'org.spockframework:spock-core'
    testRuntimeOnly 'net.bytebuddy:byte-buddy'
    testRuntimeOnly 'org.objenesis:objenesis'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    executionData(fileTree(project.layout.buildDirectory).include("jacoco/*.exec"))
    reports {
        html.required = true
        xml.required = true
    }
}

tasks.register('printRuntimeClasspath') {
    doLast {
        configurations.runtimeClasspath.each {
            println it
        }
    }
}

tasks.register('printCompileClasspath') {
    doLast {
        configurations.compileClasspath.each {
            println it
        }
    }
}
