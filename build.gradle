plugins {
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'com.palantir.git-version' version '0.12.3'
    id "com.coditory.integration-test" version "1.1.11"
    id 'io.micronaut.library' version '1.2.0'
}

ext {
    gradleWrapperVersion = ext.gradleVersion
    githubArtifactRepoOwner = 'dburyak'
    githubArtifactRepoName = project.name
}

group = 'com.dburyak.vertx.tools.core'
version gitVersion()
description = 'Basic tools for vertx based projects'
ext { isRelease = versionDetails().isCleanTag }
if (!isRelease) {
    project.version += '-SNAPSHOT'
}
archivesBaseName = project.name

sourceCompatibility = 15
targetCompatibility = 15

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

micronaut {
    version = micronautDiVersion
}

dependencies {
    // lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    integrationCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    integrationAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation "io.vertx:vertx-core:${vertxVersion}"
    implementation "io.vertx:vertx-lang-groovy:${vertxVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"

    implementation "io.vertx:vertx-rx-java2:${vertxVersion}"
    implementation "io.vertx:vertx-reactive-streams:${vertxVersion}"
    implementation "io.vertx:vertx-config:${vertxVersion}"
    implementation "io.vertx:vertx-auth-jwt:${vertxVersion}"
    implementation "io.vertx:vertx-service-discovery:${vertxVersion}"
    implementation "io.vertx:vertx-circuit-breaker:${vertxVersion}"
    implementation "io.vertx:vertx-web-client:${vertxVersion}"
    implementation "io.vertx:vertx-hazelcast:${vertxVersion}"

    // service proxy
    implementation "io.vertx:vertx-service-proxy:${vertxVersion}"
    implementation "io.vertx:vertx-codegen:${vertxVersion}"
    implementation "io.vertx:vertx-rx-java2-gen:${vertxVersion}"

    // TODO: this may be a separate repo/lib : web
    implementation "io.vertx:vertx-web:${vertxVersion}"
    implementation "io.vertx:vertx-health-check:${vertxVersion}"

    // TODO: this may be a separate repo/lib: mongo
    implementation "io.vertx:vertx-mongo-client:${vertxVersion}"

    // logging
    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"

    // micronaut DI
    def excludeMicronautHttp = {
        exclude group: 'io.micronaut', module: 'micronaut-http'
    }
    api "io.micronaut:micronaut-inject:${micronautDiVersion}"
    api "io.micronaut:micronaut-validation:${micronautDiVersion}", excludeMicronautHttp
    compileOnly "io.micronaut:micronaut-inject-groovy:${micronautDiVersion}"
    api "io.micronaut:micronaut-runtime-groovy:${micronautGroovyRuntimeVersion}"
    annotationProcessor "io.micronaut:micronaut-validation:${micronautDiVersion}", excludeMicronautHttp
    testCompileOnly "io.micronaut:micronaut-inject-groovy:${micronautDiVersion}"
    testAnnotationProcessor "io.micronaut:micronaut-validation:${micronautDiVersion}", excludeMicronautHttp

    api "com.esotericsoftware:kryo:${kryoVersion}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitEngineVersion}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitEngineVersion}"

    // spock
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile "org.spockframework:spock-junit4:${spockVersion}"
    testRuntime "net.bytebuddy:byte-buddy:${byteBuddyVersion}"
    testRuntime "org.objenesis:objenesis:${objenesisVersion}"

    // vertx testing
    testImplementation "io.vertx:vertx-unit:${vertxVersion}"

    // logback impl used only for tests
    testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}"
}

publishing {
    repositories {
        mavenLocal()
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/dburyak/tools-vertx-core')
            credentials {
                username = project.findProperty('gpr.user') ?: System.getenv('GPR_USER')
                password = project.findProperty('gpr.key') ?: System.getenv('GPR_KEY')
            }
        }
    }
    afterEvaluate {
        publications {
            githubPackagesRepository(MavenPublication) {
                from(components.java)
                groupId = project.group
                artifactId = githubArtifactRepoName
                version = project.version
                artifact tasks['sourcesJar']
                artifact tasks['javadocJar']
                pom {
                    url.set "https://github.com/dburyak/tools-vertx-core"
                    description project.description
                }
            }
        }
    }
}

defaultTasks 'build'

task sourcesJar(type: Jar, dependsOn: classes) {
    group 'build'
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    group 'build'
    archiveClassifier.set 'javadoc'
    from groovydoc.destinationDir
}

tasks.withType(Javadoc) {
    options.encoding 'UTF-8'
    options.charSet 'UTF-8'
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

tasks.findAll { it.name.startsWith 'publish' }
        .each { pubTask ->
            pubTask.dependsOn build, check, groovydoc
        }

private def readGprCreds() {
    def gprUser = project.findProperty('gpr.user') ?: System.getenv('GPR_USER')
    def gprKey = project.findProperty('gpr.key') ?: System.getenv('GPR_KEY')
    [user: gprUser?.strip() as boolean, key: gprKey?.strip() as boolean]
}

tasks.findAll { it.name =~ /publish\w*Git[Hh]ub/ }
        .each { pubTask ->
            pubTask.with {
                doFirst {
                    def creds = readGprCreds()
                    if (!creds.values().every()) {
                        System.err.println 'github package registry creds must be set via env variables : ' +
                                'GPR_USER, GPR_KEY'
                        throw new GradleException("no github package registry creds are set : " +
                                "user=${creds.user}, key=${creds.key}")
                    }
                }
                dependsOn sourcesJar, javadocJar
            }
        }

wrapper {
    gradleVersion = gradleWrapperVersion
    distributionType = 'ALL'
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty 'vertx.logger-delegate-factory-class-name', 'io.vertx.core.logging.SLF4JLogDelegateFactory'
}
