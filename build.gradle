buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'maven-publish'

    // annotation processing plugin (required for micronaut DI)
    id 'net.ltgt.apt' version '0.18'
}

ext {
    wrapperGradleVersion = ext.gradleVersion
    githubArtifactRepoOwner = 'dburyak'
    githubArtifactRepoName = project.name
}

group = 'com.archiuse.mindis'
version = '0.0.2'
ext { isRelease = false } // defines whether "snapshot" suffix should be added to artifacts
description = 'Mindis tools for vertx based projects'
archivesBaseName = project.name

if (!isRelease) {
    project.version += '-SNAPSHOT'
}

sourceCompatibility = 13

// using java12 compatibility only for compatibility with spock
// when spock for groovy3 and java13 is released, move this to java13
targetCompatibility = 12

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${githubArtifactRepoOwner}/${githubArtifactRepoName}")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
    }
    afterEvaluate {
        publications {
            githubPackagesRepository(MavenPublication) {
                groupId = project.group
                artifactId = githubArtifactRepoName
                version = project.version

                from components.java
                artifact tasks['sourcesJar']
                artifact tasks['javadocJar']

                pom {
                    url.set "https://github.com/${githubArtifactRepoOwner}/${githubArtifactRepoName}"
                    description project.description
                }
            }
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation "io.vertx:vertx-core:${vertxVersion}"
    implementation "io.vertx:vertx-lang-groovy:${vertxVersion}"

    implementation "io.vertx:vertx-rx-java2:${vertxVersion}"
    implementation "io.vertx:vertx-config:${vertxVersion}"
    implementation "io.vertx:vertx-auth-jwt:${vertxVersion}"
    implementation "io.vertx:vertx-service-discovery:${vertxVersion}"
    implementation "io.vertx:vertx-service-proxy:${vertxVersion}"
    implementation "io.vertx:vertx-service-factory:${vertxVersion}"
    implementation "io.vertx:vertx-circuit-breaker:${vertxVersion}"
    implementation "io.vertx:vertx-web-client:${vertxVersion}"

    // TODO: this may be a separate repo/lib : web
    implementation "io.vertx:vertx-web:${vertxVersion}"
    implementation "io.vertx:vertx-health-check:${vertxVersion}"

    // TODO: this may be a separate repo/lib: mongo
    implementation "io.vertx:vertx-mongo-client:${vertxVersion}"

    // logging
    implementation "org.slf4j:slf4j-api:${slf4ApiVersion}"

    // micronaut DI
    implementation "io.micronaut:micronaut-inject:${micronautDiVersion}"
    implementation "io.micronaut:micronaut-validation:${micronautDiVersion}"
    /*  should be set up by each lib user, those are applied only at compilation
    compileOnly "io.micronaut:micronaut-inject-groovy:${micronautDiVersion}"
    testCompileOnly "io.micronaut:micronaut-inject-groovy:${micronautDiVersion}"
    annotationProcessor "io.micronaut:micronaut-validation:${micronautDiVersion}"
     */

    // spock
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation("com.athaydes:spock-reports:${spockReportsVersion}") {
        transitive = false
    }

    // vertx testing
    testImplementation "io.vertx:vertx-unit:${vertxVersion}"
    testImplementation "io.vertx:vertx-junit5:${vertxVersion}"

    // logback impl used only for tests
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
}

defaultTasks 'build'

wrapper {
    gradleVersion = wrapperGradleVersion
}

private def readGprCreds() {
    def gprUser = project.findProperty('gpr.user') ?: System.getenv('GPR_USER')
    def gprKey = project.findProperty('gpr.key') ?: System.getenv('GPR_API_KEY')
    [user: gprUser?.strip() as boolean, key: gprKey?.strip() as boolean]
}

tasks.findAll { it.name =~ /publish\w*Git[Hh]ub/ }
        .each { pubTask ->
            pubTask.with {
                doFirst {
                    def creds = readGprCreds()
                    if (!creds.values().every()) {
                        System.err.println 'github package registry creds must be set via env variables : ' +
                                'GPR_USER, GPR_API_KEY'
                        throw new GradleException("no github package registry creds are set : " +
                                "user=${creds.user}, key=${creds.key}")
                    }
                }
            }
        }

task sourcesJar(type: Jar, dependsOn: classes) {
    group 'build'
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    group 'build'
    archiveClassifier.set 'javadoc'
    from groovydoc.destinationDir
}

tasks.withType(Javadoc) {
    options.encoding 'UTF-8'
    options.charSet 'UTF-8'
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

tasks.findAll { it.name.startsWith 'publish' }
        .each { pubTask ->
            pubTask.dependsOn build, test, groovydoc
        }
